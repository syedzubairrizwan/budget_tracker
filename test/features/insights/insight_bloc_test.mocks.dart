// Mocks generated by Mockito 5.4.6 from annotations
// in budget_tracker/test/features/insights/insight_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:budget_tracker/models/budget.dart' as _i7;
import 'package:budget_tracker/models/category.dart' as _i6;
import 'package:budget_tracker/models/goal.dart' as _i8;
import 'package:budget_tracker/models/transaction.dart' as _i5;
import 'package:budget_tracker/services/database_service.dart' as _i3;
import 'package:budget_tracker/services/transaction_analysis_service.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertTransaction(_i5.Transaction? transaction) =>
      (super.noSuchMethod(
            Invocation.method(#insertTransaction, [transaction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Transaction>> getTransactions() =>
      (super.noSuchMethod(
            Invocation.method(#getTransactions, []),
            returnValue: _i4.Future<List<_i5.Transaction>>.value(
              <_i5.Transaction>[],
            ),
          )
          as _i4.Future<List<_i5.Transaction>>);

  @override
  _i4.Future<void> updateTransaction(_i5.Transaction? transaction) =>
      (super.noSuchMethod(
            Invocation.method(#updateTransaction, [transaction]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTransaction(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTransaction, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertCategory(_i6.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#insertCategory, [category]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.Category>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i4.Future<List<_i6.Category>>.value(<_i6.Category>[]),
          )
          as _i4.Future<List<_i6.Category>>);

  @override
  _i4.Future<void> updateCategory(_i6.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [category]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteCategory(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertBudget(_i7.Budget? budget) =>
      (super.noSuchMethod(
            Invocation.method(#insertBudget, [budget]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.Budget>> getBudgets() =>
      (super.noSuchMethod(
            Invocation.method(#getBudgets, []),
            returnValue: _i4.Future<List<_i7.Budget>>.value(<_i7.Budget>[]),
          )
          as _i4.Future<List<_i7.Budget>>);

  @override
  _i4.Future<void> updateBudget(_i7.Budget? budget) =>
      (super.noSuchMethod(
            Invocation.method(#updateBudget, [budget]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteBudget(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBudget, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertGoal(_i8.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#insertGoal, [goal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.Goal>> getGoals() =>
      (super.noSuchMethod(
            Invocation.method(#getGoals, []),
            returnValue: _i4.Future<List<_i8.Goal>>.value(<_i8.Goal>[]),
          )
          as _i4.Future<List<_i8.Goal>>);

  @override
  _i4.Future<void> updateGoal(_i8.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#updateGoal, [goal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteGoal(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteGoal, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [TransactionAnalysisService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionAnalysisService extends _i1.Mock
    implements _i9.TransactionAnalysisService {
  MockTransactionAnalysisService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isPotentialDuplicate(
    _i5.Transaction? newTransaction,
    List<_i5.Transaction>? existingTransactions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isPotentialDuplicate, [
              newTransaction,
              existingTransactions,
            ]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i9.Subscription>> detectSubscriptions(
    List<_i5.Transaction>? transactions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#detectSubscriptions, [transactions]),
            returnValue: _i4.Future<List<_i9.Subscription>>.value(
              <_i9.Subscription>[],
            ),
          )
          as _i4.Future<List<_i9.Subscription>>);

  @override
  _i4.Future<List<_i9.Insight>> getSpendingInsights(
    List<_i5.Transaction>? transactions,
    List<_i6.Category>? categories,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSpendingInsights, [transactions, categories]),
            returnValue: _i4.Future<List<_i9.Insight>>.value(<_i9.Insight>[]),
          )
          as _i4.Future<List<_i9.Insight>>);
}
